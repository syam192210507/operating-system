#include <stdio.h>

#define TOTAL_BLOCKS 16
#define INODE_BLOCKS 8
#define FIRST_DATA_BLOCK 8
#define BLOCK_SIZE 1024

typedef struct {
    int startBlock;
    int numBlocks;
} FileAllocation;

// Function to allocate blocks for a file
FileAllocation allocateBlocks(int fileSize) {
    FileAllocation allocation;

    // Check if file size is less than the minimum size
    if (fileSize < BLOCK_SIZE) {
        allocation.startBlock = -1;
        allocation.numBlocks = 0;
        return allocation;
    }

    // Find the first available contiguous blocks
    int startBlock = -1;
    int numBlocks = 0;
    for (int i = FIRST_DATA_BLOCK; i < TOTAL_BLOCKS; ++i) {
        if (numBlocks == 0 && i % BLOCK_SIZE == 0) {
            startBlock = i;
        }

        if (numBlocks < fileSize / BLOCK_SIZE) {
            ++numBlocks;
        } else {
            break;
        }
    }

    // If contiguous blocks are found, allocate them
    if (numBlocks > 0) {
        allocation.startBlock = startBlock;
        allocation.numBlocks = numBlocks;
        return allocation;
    } else {
        allocation.startBlock = -1;
        allocation.numBlocks = 0;
        return allocation;
    }
}

int main() {
    int fileSize;
    printf("Enter the file size (in KB, minimum 1 KB): ");
    scanf("%d", &fileSize);

    FileAllocation fileAllocation = allocateBlocks(fileSize * BLOCK_SIZE);

    if (fileAllocation.startBlock == -1) {
        printf("Not enough contiguous blocks available for the file.\n");
    } else {
        printf("File allocated successfully:\n");
        printf("Start Block: %d\n", fileAllocation.startBlock);
        printf("Number of Blocks: %d\n", fileAllocation.numBlocks);
    }

    return 0;
}
